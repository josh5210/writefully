// /src/app/components/StoryDownloader.tsx

import React from 'react';
import { Download, FileText } from 'lucide-react';

interface StoryPage {
    pageNumber: number;
    content: string;
    length: number;
    completedAt: string;
}

interface StoryDownloaderProps {
    pages: StoryPage[];
    storyTopic: string;
    totalPages: number;
    authorStyle?: string;
}

export default function StoryDownloader({ 
    pages, 
    storyTopic, 
    totalPages, 
    authorStyle 
}: StoryDownloaderProps) {
    
    const generateStoryText = (): string => {
        const header = `${storyTopic}\n${authorStyle ? `Written in the style of ${authorStyle}` : ''}\n\nGenerated by Writefully\n${'='.repeat(50)}\n\n`;
        
        const storyContent = pages
            .sort((a, b) => a.pageNumber - b.pageNumber)
            .map(page => {
                // Remove markdown formatting for plain text
                const plainText = page.content
                    .replace(/#{1,6}\s/g, '') // Remove headers
                    .replace(/\*\*(.*?)\*\*/g, '$1') // Remove bold
                    .replace(/\*(.*?)\*/g, '$1') // Remove italic
                    .replace(/`(.*?)`/g, '$1') // Remove code
                    .replace(/^\s*[-*+]\s/gm, '• ') // Convert bullet points
                    .replace(/^\s*\d+\.\s/gm, (match, offset, string) => {
                        // const lineStart = string.lastIndexOf('\n', offset) + 1;
                        const lineNumber = (string.substring(0, offset).match(/^\s*\d+\.\s/gm) || []).length + 1;
                        return `${lineNumber}. `;
                    }); // Convert numbered lists
                
                return `Page ${page.pageNumber}\n${'-'.repeat(20)}\n\n${plainText}\n\n`;
            })
            .join('');
        
        const footer = `\n${'='.repeat(50)}\nStory Statistics:\n- Total Pages: ${totalPages}\n- Words: ~${Math.round(pages.reduce((sum, page) => sum + page.length, 0) / 5)}\n- Generated: ${new Date().toLocaleDateString()}\n`;
        
        return header + storyContent + footer;
    };

    const downloadStory = (): void => {
        const storyText = generateStoryText();
        const blob = new Blob([storyText], { type: 'text/plain;charset=utf-8' });
        
        // Create download link
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        
        // Generate filename from topic, removing special characters
        const sanitizedTopic = storyTopic
            .replace(/[^a-zA-Z0-9\s-]/g, '')
            .replace(/\s+/g, '_')
            .toLowerCase();
        
        link.href = url;
        link.download = `${sanitizedTopic}_story.txt`;
        
        // Trigger download
        document.body.appendChild(link);
        link.click();
        
        // Cleanup
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    };

    const totalWords = Math.round(pages.reduce((sum, page) => sum + page.length, 0) / 5);

    return (
        <div className="max-w-4xl mx-auto p-6 bg-[var(--card)] rounded-lg shadow-lg border border-[var(--border)] transition-all duration-300">
            <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                    <FileText className="h-6 w-6 text-[var(--primary)]" />
                    <h3 className="text-xl font-serif font-semibold text-[var(--card-foreground)]">
                        Your Story is Complete!
                    </h3>
                </div>
                <div className="text-sm text-[var(--muted)] font-serif">
                    {pages.length} pages • ~{totalWords} words
                </div>
            </div>

            <div className="bg-[var(--muted)]/10 rounded-lg p-4 mb-6">
                <div className="flex items-start space-x-4">
                    <div className="flex-1">
                        <h4 className="font-serif font-medium text-[var(--card-foreground)] mb-2">
                            &quot;{storyTopic}&quot;
                        </h4>
                        {authorStyle && (
                            <p className="text-sm text-[var(--muted)] font-serif italic mb-3">
                                Written in the style of {authorStyle}
                            </p>
                        )}
                        <p className="text-sm text-[var(--muted)] font-serif">
                            Your story has been generated successfully! You can now download it as a text file 
                            to save, share, or continue editing in your favorite text editor.
                        </p>
                    </div>
                </div>
            </div>

            <div className="flex justify-center">
                <button
                    onClick={downloadStory}
                    className="flex items-center space-x-2 px-6 py-3 bg-[var(--primary)] hover:bg-[var(--primary)]/90 
                               text-[var(--primary-foreground)] rounded-lg font-serif font-medium 
                               transition-all duration-200 shadow-md hover:shadow-lg transform hover:scale-105"
                >
                    <Download className="h-5 w-5" />
                    <span>Download Story</span>
                </button>
            </div>

            <div className="mt-4 pt-4 border-t border-[var(--border)]">
                <div className="flex justify-between text-xs text-[var(--muted)] font-serif">
                    <span>File format: Plain Text (.txt)</span>
                    <span>Compatible with all text editors</span>
                </div>
            </div>
        </div>
    );
}